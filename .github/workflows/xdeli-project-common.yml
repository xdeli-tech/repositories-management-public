name: XDeli project common

on:
  issues:
    types: [opened, assigned, unassigned]
  pull_request:
    types: [opened, assigned, unassigned]
  pull_request_target:
    types: [opened, edited, reopened, ready_for_review, review_requested, converted_to_draft, synchronize]

env:
  PJ_GH_BOT_TOKEN: ${{ secrets.XDELI_BOT_TOKEN }}
  backlog: ðŸ“‹ Backlog
  unread: ðŸ“¥ Unread
  org: xdeli-tech
  project_id: 3
  ORG_NAME: xdeli-tech
  STRICT_REPO_LIST: |
    xdeli-tech/iemeci-aws-infrastructure
    xdeli-tech/delivery-provider-skeleton
    xdeli-tech/delivery-provider
    xdeli-tech/delivery-provider-ubereats
    xdeli-tech/delivery-provider-demaecan
    xdeli-tech/rpa_ai
    xdeli-tech/xdeli-web-app

concurrency:
  group: project-common-${{ github.ref }}
  cancel-in-progress: true

jobs:
  move_to_unread:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ github.event.action == 'opened' || github.event.action == 'assigned' || github.event.action == 'unassigned' }}
    steps:
      - name: Move issue to ${{ env.unread }}
        uses: leonsteinhaeuser/project-beta-automations@v2.2.1
        with:
          gh_token: ${{ env.PJ_GH_BOT_TOKEN }}
          organization: ${{ env.org }}
          project_id: ${{ env.project_id }}
          resource_node_id: ${{ github.event.pull_request.node_id || github.event.issue.node_id }}
          status_value: ${{ env.unread }}

  pr-opened:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ github.event_name == 'pull_request_target' && github.event.action == 'ready_for_review' }}
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt update && sudo apt install -y gh
      - name: Change Assignee if PR has reviewers
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          REVIEWERS=$(gh pr view $PR_NUMBER --json reviewRequests --jq '.reviewRequests[].login' |  tr '\n' ',' | sed 's/,$//')
          echo "Reviewers to be assigned: $REVIEWERS"
          if [ -n "$REVIEWERS" ]; then
            gh pr edit $PR_NUMBER --add-assignee $REVIEWERS
            echo "Assigned reviewers as assignees for PR #$PR_NUMBER"
          else
            echo "No reviewers found to assign for PR #$PR_NUMBER"
          fi
        env:
          GH_TOKEN: ${{ env.PJ_GH_BOT_TOKEN }}

  pr-converted-to-draft:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ github.event_name == 'pull_request_target' && github.event.action == 'converted_to_draft' }}
    steps:
      - uses: actions/checkout@v4
      - uses: peter-evans/assign-action@v1
        with:
          token: ${{ env.PJ_GH_BOT_TOKEN }}
          assignees: ${{ github.event.pull_request.user.login }}

  pr-review-requested:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: ${{ github.event_name == 'pull_request_target' && github.event.action == 'review_requested' }}
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt update && sudo apt install -y gh
      - name: Change Assignee if PR is Open
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          PR_STATE=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq .state)
          PR_DRAFT=$(gh api repos/${{ github.repository }}/pulls/$PR_NUMBER --jq .draft)
          if [ "$PR_STATE" = "open" ] && [ "$PR_DRAFT" = "false" ]; then
            REVIEWERS=$(gh pr view $PR_NUMBER --json reviewRequests --jq '.reviewRequests[].login' |  tr '\n' ',' | sed 's/,$//')
            echo "Reviewers to be assigned: $REVIEWERS"
            gh pr edit $PR_NUMBER --add-assignee $REVIEWERS
            echo "Assigned reviewers as assignees for PR #$PR_NUMBER"
          else
            echo "PR #$PR_NUMBER is not open. No changes made."
          fi
        env:
          GH_TOKEN: ${{ env.PJ_GH_BOT_TOKEN }}


  check_pull_requests_to_link_issues:
    runs-on: ubuntu-latest
    name: Check linked issues in pull requests
    if: >-
      (github.event_name == 'pull_request_target')
      && (
        (github.repository == 'xdeli-tech/rpa_ai')
      )
    steps:
      - uses: nearform-actions/github-action-check-linked-issues@v1
        id: check-linked-issues
        with:
          exclude-branches: 'release/**, dependabot/**, project-common/**'
          github-token: ${{ env.PJ_GH_BOT_TOKEN }}
          loose-matching: true

    branches-ignore:
      - main


  create_and_enable_automerge:
    runs-on: ubuntu-latest
    timeout-minutes: 1
    if: >-
      (github.event_name == 'push')
      && (github.ref != 'refs/heads/main')
      && contains(split(env.STRICT_REPO_LIST, '\n'), github.repository)
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Set branch name as output
        id: branch_name
        run: echo "::set-output name=branch::${GITHUB_REF#refs/heads/}"

      - name: Create Pull Request
        id: create_pr
        uses: repo-sync/pull-request@v2
        with:
          github_token: ${{ secrets.XDELI_BOT_TOKEN }}
          destination_branch: 'main'
          source_branch: ''
          pr_title: '${{ steps.branch_name.outputs.branch }}'
          pr_body: ':magic_wand: :sparkles:'
          pr_draft: false

      - name: Assign PR to author
        if: steps.create_pr.outputs.pr_number
        uses: octokit/request-action@v2.x
        with:
          route: POST /repos/${{ github.repository }}/issues/${{ steps.create_pr.outputs.pr_number }}/assignees
          assignees: ${{ github.actor }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get PR Node ID
        if: steps.create_pr.outputs.pr_number
        id: get_pr_id
        run: |
          PR_DATA=$(curl -s -H "Authorization: token ${{ secrets.XDELI_BOT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/repos/${{ github.repository }}/pulls/${{ steps.create_pr.outputs.pr_number }}")
          PR_ID=$(echo "$PR_DATA" | jq -r '.node_id')
          echo "::set-output name=node_id::$PR_ID"

      - name: Enable Auto Merge for PR
        if: steps.create_pr.outputs.pr_number
        run: |
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: bearer ${{ secrets.XDELI_BOT_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "query": "mutation($id: ID!) { enablePullRequestAutoMerge(input: { pullRequestId: $id }) { clientMutationId } }",
              "variables": {
                "id": "'"${{ steps.get_pr_id.outputs.node_id }}"'"
              }
            }' \
            "https://api.github.com/graphql")
          echo "$RESPONSE"
          if echo "$RESPONSE" | jq -e '.errors' >/dev/null; then
            echo "Failed to enable auto merge"
            exit 1
          fi
